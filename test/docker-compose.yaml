version: '3.6'
name: test
services:
  postgres:
    image: postgres
    restart: always
    volumes:
    - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgrespassword
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 10s
      timeout: 5s
      retries: 30
  redis:
    image: redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
  hge:
    image: hasura/graphql-engine:latest
    ports:
    - "8050:8080"
    depends_on:
      postgres:
        condition: service_healthy
      dca:
        condition: service_healthy
    restart: always
    environment:
      HASURA_GRAPHQL_EE_LICENSE_KEY: ${HASURA_GRAPHQL_EE_LICENSE_KEY}
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      ## The metadata database for this Hasura GraphQL project. Can be changed to a managed postgres instance
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      DB_URL: postgres://postgres:postgrespassword@postgres:5432/postgres

      ## Optional settings:
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: true
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: true
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ENABLED_APIS: metadata,graphql,config,metrics
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      # Configures the connection to the Data Connector agent for Snowflake by default
      # You can also omit this and manually configure the same thing via the 'Data' tab, then 'Add Agent'
      # in the Hasura console
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"snowflake":{"uri":"http://dca:8081/api/v1/snowflake"},"athena":{"uri":"http://dca:8081/api/v1/athena"}}}}'
    healthcheck:
      test: bash -c ':> /dev/tcp/0.0.0.0/8080' || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
  dca:
    image: hasura/graphql-data-connector:v2.21.0
    restart: always
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: 'false'
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/snowflake/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
  # jaeger:
  #   image: jaegertracing/all-in-one:1.37
  #   restart: always
  #   ports:
  #     - 5775:5775/udp
  #     - 6831:6831/udp
  #     - 6832:6832/udp
  #     - 5778:5778
  #     - 4002:16686
  #     - 14250:14250
  #     - 14268:14268
  #     - 14269:14269
  #     - 4317:4317 # OTLP gRPC
  #     - 4318:4318 # OTLP HTTP
  #     - 9411:9411
  #   environment:
  #     COLLECTOR_OTLP_ENABLED: 'true'
  #     COLLECTOR_ZIPKIN_HOST_PORT: '9411'
volumes:
  db_data:
